%{

    #include "hw3_output.hpp"
    #include <iostream>
    #include <stdlib.h>
    #include "types.hpp"
    #include "symbol_table.hpp"
    #include "bp.hpp"
    #include "code_generator.hpp"

    using namespace output;
    using std::vector;

    extern int yylex();
    extern int yylineno;
    
    int yyerror(const char * message);

    TablesStack* tables_stack = &(TablesStack::getTablesStack());
    CodeBuffer* code_buffer = &(CodeBuffer::instance());
    CodeGenerator* code_generator;
%}

%token VOID INT BYTE B BOOL OVERRIDE TRUE FALSE RETURN IF WHILE BREAK CONTINUE COMMA LBRACE RBRACE ID NUM STRING
%right ASSIGN
%left OR
%left AND
%left RELOP
%left BINOP
%right NOT
%left LPAREN
%left RPAREN
%left SC
%right ELSE

%%

Program     :   Funcs { 
                    if (!tables_stack->mainExists()) {
                        errorMainMissing();
                        exit(1);
                    }
                    tables_stack->closeScope();
                    code_generator->getCodeBuffer()->printGlobalBuffer();
                    code_generator->getCodeBuffer()->printCodeBuffer();
                    exit(0);
                };
Funcs       :       { }
            |   FuncDecl Funcs { }
            ;
FuncDecl    :   OverRide RetType ID LPAREN Formals {
                    OverrideNode* override = (OverrideNode*)$1;
                    RetTypeNode* returnType = (RetTypeNode*)$2;
                    IdNode* id = (IdNode*)$3;
                    id->type = returnType->type;
                    FormalsNode* formals = (FormalsNode*)$5;
                    int counter = 0;
                    int res = tables_stack->declFunc(id->name, returnType->type, formals, override->isOverride, yylineno, &counter);
                    if(res == -1) {
                        exit(1);
                    }

                    $$ = new FuncDeclNode(returnType->type, id->name, counter, formals->declarations);
                    code_generator->startFunc((FuncDeclNode*)$$, counter);
                } RPAREN LBRACE N Statements RBRACE {
                    tables_stack->curr_func_type = NULL_TYPE;
                    code_generator->endFunc((RetTypeNode*)$2, (StatementsNode*)$10, (MarkerNode*)$9); // check if statements is $10 or $9
                    tables_stack->closeScope();   
                };
OverRide    :       { $$ = new OverrideNode(); }
            |   OVERRIDE { $$ = new OverrideNode(true); }
            ;
RetType     :   Type { 
                    TypeNode* type = (TypeNode*)$1;
                    $$ = new RetTypeNode(type->type);
                }
            |   VOID { $$ = new RetTypeNode(TYPE_VOID); }
            ;
Formals     :       { $$ = new FormalsNode(); }
            |   FormalsList { $$ = new FormalsNode(((FormalsListNode*)$1)->declarations); }
            ;
FormalsList :   FormalDecl { 
                    vector<FormalDeclNode*> vec;
                    vec.insert(vec.begin(), (FormalDeclNode*)$1);
                    $$ = new FormalsListNode(vec);
                }
            |   FormalDecl COMMA FormalsList { 
                    FormalDeclNode* formal_dec = (FormalDeclNode*)$1;
                    FormalsListNode* formal_list = (FormalsListNode*)$3;
                    formal_list->declarations.insert(formal_list->declarations.begin(), formal_dec);

                    $$ = new FormalsListNode(formal_list->declarations);
                }
            ;
FormalDecl  :   Type ID { 
                    TypeNode* type = (TypeNode*)$1;
                    IdNode* id = (IdNode*)$2;
                    if (tables_stack->isInCurrScope(id->name)) {
                        errorDef(yylineno, id->name);
                        exit(1);
                    }
                    id->var = code_generator->freshVar();
                    $$ = new FormalDeclNode(type->type, id->name, id->var);
                };
Statements  :   Statement { 
                    StatementNode* s = (StatementNode*)$1;
                    vector<StatementNode*> s_list;
                    s_list.push_back(s);
                    $$ = new StatementsNode(s_list);
                    code_generator->processFirstStatement((StatementsNode*)$$, s);
                }
            |   Statements Statement { 
                    $$ = (StatementsNode*)$1;
                    code_generator->processStatements((StatementsNode*)$$, (StatementNode*)$2);
                }
            ;
Statement   :   LBRACE OpenScope Statements RBRACE CloseScope { 
                    StatementsNode* statements = (StatementsNode*)$3;
                    $$ = new StatementNode();
                    code_generator->processEndStatement((StatementNode*)($$), statements);
                }
            |   Type ID SC { 
                    TypeNode* type = (TypeNode*)$1;
                    IdNode* id = (IdNode*)$2;
                    if (tables_stack->symbDeclared(id->name)) {
                        errorDef(yylineno, id->name);
                        exit(1);
                    }
                    $$ = new StatementNode();
                    code_generator->initVar(id, (StatementNode*)$$, type->type, tables_stack->offset_stack.top());
                    tables_stack->declVar(id->name, type->type, id->var);
                 }
            |   Type ID ASSIGN Exp SC { 
                    TypeNode* type = (TypeNode*)$1;
                    IdNode* id = (IdNode*)$2;
                    ExpNode* exp = (ExpNode*)$4;
                    if (tables_stack->symbDeclared(id->name)) {
                        errorDef(yylineno, id->name);
                        exit(1);
                    }
                    else {
                        if (AssignLegality(type->type, exp->type)) {
                            id->var = exp->var;
                            id->type = type->type;
                            exp->value = id->name;
                            tables_stack->declVar(id->name, type->type, id->var);
                        }
                        else {
                            errorMismatch(yylineno);
                            exit(1);
                        }
                    }
                    $$ = new StatementNode();
                    code_generator->storeVar(exp, (StatementNode*)$$, tables_stack->offset_stack.top());
                }
            |   ID ASSIGN Exp SC { 
                    IdNode* id = (IdNode*)$1;
                    ExpNode* exp = (ExpNode*)$3;
                    if (!tables_stack->symbDeclared(id->name)) {
                        errorUndef(yylineno, id->name);
                        exit(1);
                    }
                    TypesEnum type = tables_stack->getIdType(id->name);
                    if (!AssignLegality(type, exp->type)) {
                            errorMismatch(yylineno);
                            exit(1);
                    }
                    exp->value = id->name;
                    int offset = tables_stack->getIdOffset(id->name);
                    $$ = new StatementNode();
                    code_generator->storeVar(exp, (StatementNode*)$$, offset);    
                }
            |   Call SC { 
                    CallNode* call = (CallNode*)$1;
                    $$ = new StatementNode();
                    code_generator->processStatementCall((StatementNode*)$$, call);
                }
            |   RETURN SC { 
                    if(tables_stack->curr_func_type != TYPE_VOID) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    $$ = new StatementNode();
                    code_generator->processReturn((StatementNode*)$$);
                }
            |   RETURN Exp SC { 
                    ExpNode* exp = (ExpNode*)$2;
                    if(!AssignLegality(tables_stack->curr_func_type, exp->type)) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    $$ = new StatementNode();
                    code_generator->processReturn((StatementNode*)$$, exp);
                }
            |   IF LPAREN Exp RPAREN OpenScope Statement CloseScope { 
                    ExpNode* exp = (ExpNode*)$3;
                    if(exp->type != TYPE_BOOL) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    StatementNode* statement = (StatementNode*)$6;
                    $$ = new StatementNode();
                    code_generator->processIfElse((StatementNode*)$$, exp, statement);
                } 
            |   IF LPAREN Exp RPAREN OpenScope Statement CloseScope ELSE OpenScope Statement CloseScope { 
                    ExpNode* exp = (ExpNode*)$3;
                    if(exp->type != TYPE_BOOL) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    StatementNode* if_statement = (StatementNode*)$6;
                    StatementNode* else_statement = (StatementNode*)$10;
                    $$ = new StatementNode();
                    code_generator->processIfElse((StatementNode*)$$, exp, if_statement, else_statement);
                }
            |   WHILE LPAREN Exp RPAREN WhileScope Statement CloseScope {
                    ExpNode* exp = (ExpNode*)$3;
                    if(exp->type != TYPE_BOOL) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    StatementNode* statement = (StatementNode*)$6;
                    $$ = new StatementNode();
                    code_generator->processWhile((StatementNode*)$$, exp, statement);
                }
            |   BREAK SC { 
                    if(!tables_stack->isCurrScopeInWhile()) {
                        errorUnexpectedBreak(yylineno);
                        exit(1);
                    }
                    $$ = new StatementNode();
                    code_generator->processBreakContinue((StatementNode*)$$, true);
                }
            |   CONTINUE SC {
                    if(!tables_stack->isCurrScopeInWhile()) {
                        errorUnexpectedContinue(yylineno);
                        exit(1);
                    }
                    $$ = new StatementNode();
                    code_generator->processBreakContinue((StatementNode*)$$);
                }
            ;
Call        :   ID LPAREN ExpList RPAREN {
                    IdNode* id = (IdNode*)$1;
                    ExpListNode* expr_list = (ExpListNode*)$3;
                    if(!tables_stack->symbDeclared(id->name, true)) {
                        errorUndefFunc(yylineno, id->name);
                        exit(1);
                    }
                    int res = tables_stack->checkFuncParams(id->name, expr_list->exprs, yylineno);
                    if(res == -1) {
                        exit(1);
                    }
                    int counter = tables_stack->getFuncCounter(id->name, expr_list->exprs);
                    $$ = new CallNode(tables_stack->getFuncType(id->name, expr_list->exprs), id->name, counter);
                    code_generator->processCall((CallNode*)$$, expr_list->exprs);
                }
            |   ID LPAREN RPAREN { 
                    IdNode* id = (IdNode*)$1;
                    if(!tables_stack->symbDeclared(id->name, true)){
                        errorUndefFunc(yylineno, id->name);
                        exit(1);
                    }
                    tables_stack->checkFuncParams(id->name, yylineno);
                    vector<ExpNode*> exprs;
                    int counter = tables_stack->getFuncCounter(id->name);
                    $$ = new CallNode(tables_stack->getFuncType(id->name, exprs), id->name, counter);
                    code_generator->processCall((CallNode*)$$);
                }
            ;
ExpList     :   Exp { 
                    ExpNode* exp = (ExpNode*)$1;
                    vector<ExpNode*> exps;
                    exps.insert(exps.begin(), exp);
                    $$ = new ExpListNode(exps);
                }
            |   Exp COMMA ExpList { 
                    ExpNode* exp = (ExpNode*)$1;
                    ExpListNode* expr_list = (ExpListNode*)$3;
                    expr_list->exprs.insert(expr_list->exprs.begin(), exp);
                    $$ = new ExpListNode(expr_list->exprs);
                }
            ;
Type        :   INT { $$ = new TypeNode(TYPE_INT); }
            |   BYTE { $$ = new TypeNode(TYPE_BYTE); }
            |   BOOL { $$ = new TypeNode(TYPE_BOOL); }
            ;
Exp         :   LPAREN Exp RPAREN { 
                    ExpNode* exp = (ExpNode*)$2;
                    $$ = new ExpNode(exp->type); 
                    code_generator->processParentheses((ExpNode*)$$, exp);
                }
            |   Exp BINOP Exp {
                    ExpNode* first = (ExpNode*)$1;
                    BinopNode* binop = (BinopNode*)$2;
                    ExpNode* second = (ExpNode*)$3;
                    TypesEnum type = SumType(first->type, second->type);
                    if (type == NULL_TYPE) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    $$ = new ExpNode(type);
                    code_generator->processBinop((ExpNode*)$$, first, second, binop->binop);
                }
            |   ID { 
                    IdNode* id = (IdNode*)$1;
                    if(!tables_stack->symbDeclared(id->name)) {
                            errorUndef(yylineno, id->name);
                            exit(1);
                    }
                    $$ = new ExpNode(tables_stack->getIdType(id->name));
                    int offset = tables_stack->getIdOffset(id->name);
                    code_generator->loadVar((ExpNode*)$$, offset);
                }
            |   Call { 
                    CallNode* call = (CallNode*)$1;
                    $$ = new ExpNode(call->type); 
                    code_generator->processExpCall((ExpNode*)$$, call);
                }
            |   NUM { 
                    NumNode* num = (NumNode*)$1;
                    $$ = new ExpNode(TYPE_INT, code_generator->freshVar());
                    code_generator->processExpNum((ExpNode*)$$, num);
                }
            |   NUM B { 
                    NumNode* num = (NumNode*)$1;
                    if(std::stoi(num->num_val) > 255) {
                        errorByteTooLarge(yylineno, num->num_val);
                        exit(1);
                    }
                    $$ = new ExpNode(TYPE_BYTE, code_generator->freshVar());
                    code_generator->processExpNum((ExpNode*)$$, num);
                }
            |   STRING { 
                    StringNode* str = (StringNode*)$1;
                    $$ = new ExpNode(TYPE_STRING); 
                    code_generator->processExpString((ExpNode*)$$, str);
                }
            |   TRUE { 
                    $$ = new ExpNode(TYPE_BOOL, code_generator->freshVar());
                    code_generator->processTrueOrFalse((ExpNode*)$$, true); 
                }
            |   FALSE { 
                    $$ = new ExpNode(TYPE_BOOL, code_generator->freshVar());
                    code_generator->processTrueOrFalse((ExpNode*)$$); 
                }
            |   NOT Exp { 
                    ExpNode* exp = (ExpNode*)$2;
                    if(exp->type != TYPE_BOOL) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    $$ = new ExpNode(TYPE_BOOL);
                    code_generator->processNot((ExpNode*)$$, exp);
                }
            |   Exp AND Exp { 
                    ExpNode* first = (ExpNode*)$1;
                    ExpNode* second = (ExpNode*)$3;
                    if(first->type != TYPE_BOOL || second->type != TYPE_BOOL) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    $$ = new ExpNode(TYPE_BOOL);
                    code_generator->processAnd((ExpNode*)$$, first, second);
                }
            |   Exp OR Exp { 
                    ExpNode* first = (ExpNode*)$1;
                    ExpNode* second = (ExpNode*)$3;
                    if(first->type != TYPE_BOOL || second->type != TYPE_BOOL) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    $$ = new ExpNode(TYPE_BOOL);
                    code_generator->processOr((ExpNode*)$$, first, second);
                }
            |   Exp RELOP Exp {
                    ExpNode* first = (ExpNode*)$1;
                    RelopNode* relop = (RelopNode*)$2;
                    ExpNode* second = (ExpNode*)$3;
                    TypesEnum type = SumType(first->type, second->type);
                    if (type == NULL_TYPE) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    $$ = new ExpNode(TYPE_BOOL);
                    code_generator->processRelop((ExpNode*)$$, first, second, relop->relop);
                }
            |   LPAREN Type RPAREN Exp {
                    TypeNode* type = (TypeNode*)$2;
                    ExpNode* exp = (ExpNode*)$4;
                    if(!ConversionLegality(exp->type , type->type)) {
                        errorMismatch(yylineno);
                        exit(1);
                    }
                    $$ = new ExpNode(type->type, code_generator->freshVar());
                    code_generator->processConvertion((ExpNode*)$$, exp);
                }
            ;

N           :   { 
                    List next_list = code_generator->getCodeBuffer()->makelist(pair<int, BranchLabelIndex>(code_generator->getCodeBuffer()->emit("br label @"), FIRST));
                    $$ = new MarkerNode(next_list);
                };

 OpenScope  :   { tables_stack->openScope(); };
 WhileScope :   { tables_stack->openScope(true); };
 CloseScope :   { tables_stack->closeScope(); };
%%

int main()
{
    tables_stack->Init();
    code_generator = new CodeGenerator(code_buffer);
    code_generator->emitPrint();
	yyparse();
}

int yyerror(const char * message)
{
	errorSyn(yylineno);
	exit(1);
}